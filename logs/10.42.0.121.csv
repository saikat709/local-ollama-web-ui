client_ip,handling_server,date_time,prompt
10.42.0.121,-,2025-10-11 10:14:49,give me a code to load iris
10.42.0.121,-,2025-10-11 10:42:13,"Meet Aera, a devoted Film and Drama Studies student with a heart full of stories and a dream of becoming a director who changes how the world sees emotions on screen.

Her mentor, Professor Haruto, is a legendary figure in their university — eccentric, brilliant, and deeply passionate about cinema. He’s the kind of professor who quotes classic Korean dramas in class and believes that “data tells the real story behind every masterpiece.”

For months, Haruto had been preparing his magnum opus — a massive research presentation for the FilmFare Local Showcase, the university’s grandest annual event where film scholars, critics, and students come together to celebrate the art of storytelling.
This showcase wasn’t just another presentation — it was his reputation, legacy, and pride on the line.

    But disaster struck the night before the showcase

As the clock hit midnight, Haruto inserted his old pen drive into his laptop… only to be greeted by a single line of horror:

    “Drive not readable. Files corrupted”

Years of his research — gone.
The carefully labeled K-Drama dataset, a record of thousands of dramas and their genres, had lost half its entries.
Only 50% of the genre data remained intact. The other half? Completely blank.

Panic set in. The presentation was due in just a few hours, and without the genre analysis, his entire talk would collapse.

In a moment of desperation, Haruto called his most promising student — Aera.
She had always been fascinated by how genres shape emotions, and she had built small models for fun before.
Now, this wasn’t a classroom assignment anymore — it was a real challenge.

Haruto’s voice trembled as he said:

    “Aera… my dataset—it’s gone. Half of it is missing. I can’t show anything tomorrow. You’re my only hope”

The Mission

Aera now has only 5 hours to recover the missing genre labels from the corrupted dataset before sunrise.

The dataset, thankfully, still has:

    Some K-Dramas with known genres
    And the rest — dramas with missing genres that need to be predicted

The university auditorium will be full by morning. Professors, critics, and fellow students will be watching.
If Aera fails, Haruto’s years of research — and perhaps his reputation — will crumble.

But if she succeeds…
She’ll not only save her professor but also prove that even broken data can tell beautiful stories again.

Your task?
Step into Aera’s shoes.
Help her predict the missing genres of the dramas using the remaining data — accurately, efficiently, and creatively.
You have limited time and limited data — can you bring back the lost stories before dawn?

Constraint:
Due to a sudden router DNS failure at Aera’s dorm, she can’t access any external model repositories or pretrained libraries. That means no pre-built embeddings, no sentence transformers, and no pretrained neural networks.
She must design everything from scratch — craft her own model depending on other basic libraries for NLP to recover the lost genres before sunrise.

    “True creativity begins where convenience ends”

Objective:
Predict the lost Genre values in the K-Drama dataset.
Your model’s accuracy will determine whether Aera becomes the university’s hero — or the student who couldn’t save her professor’s final act.

Start
4 days ago
Close
4 hours to go
Description

You will be given a dataset of K-Dramas with details such as titles, cast, directors, summaries, and other metadata.
Your task is to predict the genre(s) of each drama in the test set based on the available information.

Remember you can’t use any pretrained models or Hugging Face libraries here as there are some problems in Aera's local network that blocks HF. Now, no time to solve the router issue, Aera decides to get into raw codinf.

You must build your own NLP solution from scratch just like Aera, working through the night to save the day!

Good luck!
May your models be as dramatic in methodology and accuracy themselves. 💫
Evaluation

Submissions are evaluated using a multi-label genre matching metric based on the Jaccard Index (Intersection over Union).

For each K-Drama in the test set:

    If all genres are predicted correctly, the score is 100%.
    Partial matches are proportionally rewarded based on overlap.
    The final score is the average over all rows and is expressed as a percentage (0–100).

The leaderboard is split 50/50 into Public and Private sets:

    Public leaderboard is visible during the competition.
    Private leaderboard determines the final ranking.

Submission File

For each ID in the test set, you must predict the genres as a comma-separated list.
Your submission file must include a header and have the following format:
Id 	Genre
1 	Drama, Romance
2 	Action, Crime, Comedy
3 	Life, Drama

Sample submission file has achieved 13% (rounded) in the current setting"
10.42.0.121,-,2025-10-11 10:46:20,create the submission file
10.42.0.121,-,2025-10-11 10:55:02,"KeyError                                  Traceback (most recent call last)
/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py in get_loc(self, key)
   3804         try:
-> 3805             return self._engine.get_loc(casted_key)
   3806         except KeyError as err:

index.pyx in pandas._libs.index.IndexEngine.get_loc()

index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 'Genre'

The above exception was the direct cause of the following exception:

KeyError                                  Traceback (most recent call last)
/tmp/ipykernel_37/4038382436.py in <cell line: 0>()
     15 # Apply the feature extraction function to the dataset
     16 train_features = train['Genre'].apply(bow_features)
---> 17 test_features = test['Genre'].apply(bow_features)
     18 

/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py in __getitem__(self, key)
   4100             if self.columns.nlevels > 1:
   4101                 return self._getitem_multilevel(key)
-> 4102             indexer = self.columns.get_loc(key)
   4103             if is_integer(indexer):
   4104                 indexer = [indexer]

/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py in get_loc(self, key)
   3810             ):
   3811                 raise InvalidIndexError(key)
-> 3812             raise KeyError(key) from err
   3813         except TypeError:
   3814             # If we have a listlike key, _check_indexing_error will raise

KeyError: 'Genre'"
10.42.0.121,-,2025-10-11 11:00:52,create a submission file as the given submission file is read only
10.42.0.121,-,2025-10-11 11:04:05,how do i create a submission file
10.42.0.121,-,2025-10-11 11:41:59,how do i generate csv
10.42.0.121,-,2025-10-11 13:13:54,how do i train a model to recognise pictures
10.42.0.121,-,2025-10-11 13:40:33,"Overview

    March, 2125. RoboDeliver Inc.


    A catastrophic solar storm has devastated the global GPS, leaving navigation systems worldwide completely inoperative. The estimated recovery time is around 6-12 months minimum.

📉 Current infrastructure of city


City planners have rapidly deployed a network of directional arrows across urban areas for easier navigation:

    Daylight visibility: Bright orange arrow clearly visible in sunlight
    Night visibility: The same arrow glows brilliant neon green in darkness for 24/7 operation

🎯 The Mission
As the Computer Vision Researcher at RoboDeliver Inc., you've been tasked with adjusting the robot navigation system for autonomous delivery by detecting the arrow directions. Although, the solve requires pretty challenging tasks mentioned in Description. Failure could leave millions without critical deliveries during this global crisis.

    The clock is ticking. The world is depending on you.

Start
5 hours ago
Close
21 minutes to go
Description

📊 Dataset

Your team has collected 20 reference images of these navigation arrows under perfect daylight conditions and positions. Unfortunately, citywide curfews have prevented collection of nighttime training images.


Figure: Sample of Training(DAY) and Testing(Day, Night, Road) images

    Real-World Complications: Remember the training set contains perfect images. Real life arrows maybe a bit off-angled

📌Extension:
Classifying arrow images in day and night correctly results in 80% with 40% accuracy each. The rest 20% unlocks by correctly classifying images with no arrows as road.


🎯 Task:
Develop a robust image classification model that can:

    Input: 20 reference images of navigational arrows in perfect daylight conditions.
    Output: Directional classification into 8 directional categories and 1 conditional category:
        north, south, east, west
        north-east, south-east, north-west, south-west
        road (no arrow present)

🚧Limitations:

    Your solution cannot use extra images to train model. You are limited to 20 reference image.
    No manual data labeling and incorporation is allowed.

Also any pretrained models are allowed.

    May the AI forces be with you.

Evaluation

The public leader-board is based on the 30% of the test set and the private leaderboard is based on the rest 70% of the test set. Submissions are evaluated on F-1 score. According to metric documentation of Kaggle -

**F1 score**: The harmonic mean of the precision and recall, where an F1 score reaches its best value at 1 and worst score at 0.

The formula for the F1 score is::

F1 = 2 * (precision * recall) / (precision + recall)

Submission File

For each ID in the test set, you must predict a probability for the TARGET variable. The file should contain a header and have the following format:

Id, label
1,south
2,north-west
3,road
etc."
